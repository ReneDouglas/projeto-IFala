services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    container_name: ifala-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ifala
      POSTGRES_INITDB_ARGS: '--data-checksums'
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    command:
      - 'postgres'
      - '-c'
      - 'shared_preload_libraries=pg_stat_statements'
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  ifala-frontend:
    build:
      context: ./apps/ifala-frontend
      dockerfile: Dockerfile
    container_name: ifala-frontend
    environment:
      - NODE_ENV=development
    ports:
      - '5173:5173'
    volumes:
      - ./apps/ifala-frontend:/app
      - /app/node_modules

  ifala-backend:
    build:
      context: ./apps/ifala-backend
      dockerfile: Dockerfile
    container_name: ifala-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ifala
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_PROFILES_ACTIVE: docker
      JAVA_TOOL_OPTIONS:
        '-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005'
    ports:
      - '8080:8080'
      - '5005:5005'
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.5
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: senha
      KC_HTTP_HOST: 0.0.0.0
      KC_HOSTNAME_URL: http://localhost:9090
      KC_HOSTNAME_ADMIN_URL: http://localhost:9090
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
    volumes:
      - keycloak_data:/opt/keycloak/data
    command:
      - 'start-dev'
    ports:
      - '9090:8080'

  pmm-server:
    image: percona/pmm-server:2
    container_name: pmm-server
    restart: unless-stopped
    ports:
      - '8081:80'
      - '8444:443'
    volumes:
      - pmm-data:/srv

  pmm-client:
    image: percona/pmm-client:2
    container_name: pmm-client
    restart: unless-stopped
    depends_on:
      pmm-server:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      PMM_AGENT_SERVER_ADDRESS: pmm-server
      PMM_AGENT_SERVER_USERNAME: admin
      PMM_AGENT_SERVER_PASSWORD: admin
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
    command: >-
      /bin/bash -c " pmm-agent setup \
        --config-file=/usr/local/percona/pmm-agent.yaml \
        --server-address=${PMM_AGENT_SERVER_ADDRESS}:443 \
        --server-username=${PMM_AGENT_SERVER_USERNAME} \
        --server-password=${PMM_AGENT_SERVER_PASSWORD} \
        --server-insecure-tls \
        --force &&
      pmm-admin add postgresql \
        --username=${DB_USER} \
        --password=${DB_PASSWORD} \
        --host=${DB_HOST} \
        --port=${DB_PORT} \
        ifala-db &&
      tail -f /dev/null "

  # Adicionado para a Task 51 - Serviço de Monitoramento Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9091:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  # Adicionado para a Task 51 - Serviço de Visualização Grafana
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana

volumes:
  pgdata:
  keycloak_data:
  pmm-data:
  grafana-data: {}
