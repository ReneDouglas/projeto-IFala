services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    container_name: ifala-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ifala
      POSTGRES_INITDB_ARGS: '--data-checksums'
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    command:
      - 'postgres'
      - '-c'
      - 'shared_preload_libraries=pg_stat_statements'
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  ifala-frontend:
    build:
      context: ./apps/ifala-frontend
      dockerfile: Dockerfile.dev
    container_name: ifala-frontend
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    ports:
      - '5173:5173'
    volumes:
      - ./apps/ifala-frontend:/app
      - /app/node_modules

  ifala-backend:
    build:
      context: ./apps/ifala-backend
      dockerfile: Dockerfile
    container_name: ifala-backend
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ifala
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: 00112233445566778899aabbccddeeff
      JAVA_TOOL_OPTIONS:
        '-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005'
    ports:
      - '8080:8080'
      - '5005:5005'
    depends_on:
      postgres:
        condition: service_healthy

  pmm-server:
    image: percona/pmm-server:2
    container_name: pmm-server
    restart: unless-stopped
    ports:
      - '8081:80'
      - '8444:443'
    #volumes:
    #- pmm-data:/srv

  # pmm-client:
  #   image: percona/pmm-client:2
  #   container_name: pmm-client
  #   restart: unless-stopped
  #   depends_on:
  #     pmm-server:
  #       condition: service_started
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     PMM_AGENT_SERVER_ADDRESS: pmm-server
  #     PMM_AGENT_SERVER_USERNAME: admin
  #     PMM_AGENT_SERVER_PASSWORD: admin
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_USER: postgres
  #     DB_PASSWORD: postgres
  #   command: >-
  #     /bin/bash -c " pmm-agent setup \
  #       --config-file=/usr/local/percona/pmm-agent.yaml \
  #       --server-address=${PMM_AGENT_SERVER_ADDRESS}:443 \
  #       --server-username=${PMM_AGENT_SERVER_USERNAME} \
  #       --server-password=${PMM_AGENT_SERVER_PASSWORD} \
  #       --server-insecure-tls \
  #       --force &&
  #     pmm-admin add postgresql \
  #       --username=${DB_USER} \
  #       --password=${DB_PASSWORD} \
  #       --host=${DB_HOST} \
  #       --port=${DB_PORT} \
  #       ifala-db &&
  #     tail -f /dev/null "

  # Adicionado para a Task 51 - Serviço de Monitoramento Prometheus
  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    ports:
      - '9091:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  # Adicionado para a Task 51 - Serviço de Visualização Grafana
  grafana:
    image: grafana/grafana-oss:10.4.2
    container_name: grafana
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - ./monitoring/grafana/dashboards/:/var/lib/grafana/dashboards/
      - grafana-data:/var/lib/grafana

  # Serviço de Logs Grafana Loki
  loki:
    image: grafana/loki:2.9.5
    container_name: loki
    ports:
      - '3100:3100'
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml

  # Adicionado para a Task 72 - Coletor de Logs Promtail
  promtail:
    image: grafana/promtail:2.9.5
    container_name: promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - promtail-positions:/var/lib/promtail
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

volumes:
  pgdata:
  grafana-data: {}
  loki-data: {}
  promtail-positions: {}
  # pmm-data:
