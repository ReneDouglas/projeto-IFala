import { useState, useEffect } from 'react';
import type { Denuncia, DenunciasResponse, SearchParams } from '../types/denunciaTypes';

// Simula√ß√£o de API local (sem dados fixos)
const simulateApiCall = (currentPage: number, searchParams: SearchParams): Promise<DenunciasResponse> => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      try {
        // Simular erro aleat√≥rio (10% de chance)
        if (Math.random() < 0.1) {
          throw new Error('Erro de conex√£o com o servidor');
        }

        // Gerar dados din√¢micos baseados nos filtros
        const denuncias = generateDynamicDenuncias(currentPage, searchParams);
        const totalElements = calculateTotalElements(searchParams);
        const totalPages = Math.ceil(totalElements / 9);

        resolve({
          content: denuncias,
          totalPages,
          totalElements,
          size: 9,
          first: currentPage === 0,
          last: currentPage === totalPages - 1
        });
      } catch (error) {
        reject(error);
      }
    }, 800); // Simular delay de rede
  });
};

const generateDynamicDenuncias = (currentPage: number, searchParams: SearchParams): Denuncia[] => {
  const denuncias: Denuncia[] = [];
  const startId = currentPage * 9 + 1;

  for (let i = 0; i < 9; i++) {
    const id = startId + i;
    const hasUnreadMessages = Math.random() > 0.7;
    const daysAgo = Math.floor(Math.random() * 30);
    const hoursAgo = Math.floor(Math.random() * 24);
    
    // Aplicar filtros na gera√ß√£o
    const categoria = getFilteredCategoria(searchParams.categoria);
    const status = getFilteredStatus(searchParams.status);
    const titulo = getFilteredTitulo(searchParams.search, id);
    const descricao = getFilteredDescricao(searchParams.search);

    denuncias.push({
      id,
      token: `IFALA-${String(id).padStart(6, '0')}`,
      titulo,
      descricao,
      categoria,
      status,
      dataCriacao: new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000).toISOString(),
      hasUnreadMessages,
      ultimaAtualizacao: new Date(Date.now() - hoursAgo * 60 * 60 * 1000).toISOString()
    });
  }

  return denuncias;
};

const getFilteredCategoria = (filtroCategoria: string): string => {
  const categorias = ['ASSEDIO', 'VIOLENCIA', 'DISCRIMINACAO', 'OUTROS'];
  if (filtroCategoria && categorias.includes(filtroCategoria)) {
    return filtroCategoria;
  }
  return categorias[Math.floor(Math.random() * categorias.length)];
};

const getFilteredStatus = (filtroStatus: string): string => {
  const statusList = ['RECEPTADO', 'EM_ANALISE', 'AGUARDANDO_INFORMACOES', 'RESOLVIDO', 'REJEITADO'];
  if (filtroStatus && statusList.includes(filtroStatus)) {
    return filtroStatus;
  }
  return statusList[Math.floor(Math.random() * statusList.length)];
};

const getFilteredTitulo = (search: string, id: number): string => {
  const titulos = [
    'Bullying no P√°tio',
    'Ass√©dio em Sala de Aula',
    'Discrimina√ß√£o Racial',
    'Vandalismo no Laborat√≥rio',
    'Viol√™ncia Verbal',
    'Amea√ßas entre Alunos',
    'Ass√©dio Moral - Professor',
    'Danos ao Patrim√¥nio',
    'Conflito entre Turmas',
    'Uso de Subst√¢ncias Il√≠citas'
  ];
  
  let titulo = titulos[Math.floor(Math.random() * titulos.length)];
  
  // Se h√° busca, incluir termo no t√≠tulo
  if (search) {
    titulo = `${search} - ${titulo}`;
  }
  
  return `Den√∫ncia ${id}: ${titulo}`;
};

const getFilteredDescricao = (search: string): string => {
  const descricoes = [
    'Relato de situa√ß√£o ocorrida durante o intervalo das aulas envolvendo estudantes.',
    'Den√∫ncia grave que requer aten√ß√£o imediata da coordena√ß√£o.',
    'Situa√ß√£o recorrente que vem acontecendo h√° algumas semanas.',
    'Caso isolado, mas que merece investiga√ß√£o para prevenir futuras ocorr√™ncias.',
    'Relato detalhado com testemunhas e evid√™ncias que comprovam os fatos.',
    'Situa√ß√£o complexa envolvendo m√∫ltiplas partes e requiring an√°lise cuidadosa.',
    'Den√∫ncia an√¥nima com informa√ß√µes sobre viola√ß√£o do c√≥digo de conduta.'
  ];
  
  let descricao = descricoes[Math.floor(Math.random() * descricoes.length)];
  
  // Se h√° busca, incluir termo na descri√ß√£o
  if (search) {
    descricao = `${search.toUpperCase()}: ${descricao}`;
  }
  
  return descricao;
};

const calculateTotalElements = (searchParams: SearchParams): number => {
  // Simular diferentes totais baseados nos filtros
  let baseTotal = 27; // 3 p√°ginas de 9 itens
  
  // Se h√° filtros ativos, reduzir o total para simular filtragem
  if (searchParams.search || searchParams.categoria || searchParams.status) {
    baseTotal = 9 + Math.floor(Math.random() * 18); // Entre 9 e 27
  }
  
  return baseTotal;
};

export const useDenuncias = (currentPage: number, searchParams: SearchParams) => {
  const [denuncias, setDenuncias] = useState<Denuncia[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [totalPages, setTotalPages] = useState(0);
  const [totalElements, setTotalElements] = useState(0);

  const loadDenuncias = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üîÑ Carregando den√∫ncias:', { currentPage, searchParams });
      
      const response = await simulateApiCall(currentPage, searchParams);
      
      setDenuncias(response.content);
      setTotalPages(response.totalPages);
      setTotalElements(response.totalElements);
      
      console.log('‚úÖ Den√∫ncias carregadas:', response.content.length, 'itens');
      
    } catch (error) {
      console.error('Erro ao carregar den√∫ncias:', error);
      setError(error instanceof Error ? error.message : 'Erro ao carregar den√∫ncias. Tente novamente.');
      setDenuncias([]);
      setTotalPages(0);
      setTotalElements(0);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadDenuncias();
  }, [currentPage, searchParams]);

  return {
    denuncias,
    loading,
    error,
    totalPages,
    totalElements,
    refetch: loadDenuncias
  };
};